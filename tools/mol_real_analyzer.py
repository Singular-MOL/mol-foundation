print("üß™ –ß–ï–°–¢–ù–´–ô –¢–ï–°–¢ MOL –ù–ê –ù–ï–ò–ó–í–ï–°–¢–ù–´–• –°–ò–°–¢–ï–ú–ê–•")
print("=" * 55)

# –í–û–ó–¨–ú–Å–ú —Å–∏—Å—Ç–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –ù–ï –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∏ —Ä–∞–Ω–µ–µ
unknown_systems = [                                                                                           {"name": "–í–µ–Ω–µ—Ü–∏–∞–Ω—Å–∫–∞—è —Ä–µ—Å–ø—É–±–ª–∏–∫–∞ 1797", "territory": 6, "complexity": 7, "comm_time": 3, "centraliza>    {"name": "–û—Å–º–∞–Ω—Å–∫–∞—è –∏–º–ø–µ—Ä–∏—è 1922", "territory": 8, "complexity": 9, "comm_time": 5, "centralization":>
    {"name": "–ê–≤—Å—Ç—Ä–æ-–í–µ–Ω–≥—Ä–∏—è 1918", "territory": 7, "complexity": 10, "comm_time": 4, "centralization": 0>    {"name": "–Ø–ø–æ–Ω—Å–∫–∞—è –∏–º–ø–µ—Ä–∏—è 1945", "territory": 7, "complexity": 8, "comm_time": 4, "centralization": >
]

def calculate_O_E(territory, complexity, comm_time, centralization):
    size_complexity = territory * complexity * 0.1
    communication_load = comm_time ** 2
    centralization_risk = (centralization - 0.8) * 10 if centralization > 0.8 else 0
    return size_complexity + communication_load + centralization_risk

print("–°–∏—Å—Ç–µ–º–∞ | O(‚Ñ∞) | –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–∞—Ü–∏—è | MOL –ø—Ä–æ–≥–Ω–æ–∑ | –†–µ–∞–ª—å–Ω—ã–π –∏—Å—Ö–æ–¥")
print("-" * 80)

for system in unknown_systems:
    O_E = calculate_O_E(
        system["territory"],                                                                                      system["complexity"],
        system["comm_time"],
        system["centralization"]
    )

    # MOL –ø—Ä–æ–≥–Ω–æ–∑
    if O_E > 25:                                                                                                  mol_prediction = "–†–ê–°–ü–ê–î"
    elif O_E > 20:
        mol_prediction = "–ö–†–ò–ó–ò–°"
    else:
        mol_prediction = "–°–¢–ê–ë–ò–õ–¨–ù–û"

    # –†–µ–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –∏—Å—Ö–æ–¥—ã (–ø—Ä–æ–≤–µ—Ä—è–µ–º)
    real_outcomes = {
        "–í–µ–Ω–µ—Ü–∏–∞–Ω—Å–∫–∞—è —Ä–µ—Å–ø—É–±–ª–∏–∫–∞ 1797": "–†–ê–°–ü–ê–î",
        "–û—Å–º–∞–Ω—Å–∫–∞—è –∏–º–ø–µ—Ä–∏—è 1922": "–†–ê–°–ü–ê–î",
        "–ê–≤—Å—Ç—Ä–æ-–í–µ–Ω–≥—Ä–∏—è 1918": "–†–ê–°–ü–ê–î",
        "–Ø–ø–æ–Ω—Å–∫–∞—è –∏–º–ø–µ—Ä–∏—è 1945": "–ö–†–ò–ó–ò–°"
    }

    real_outcome = real_outcomes[system["name"]]
    correct = "‚úÖ" if mol_prediction == real_outcome else "‚ùå"

    print(f"{system['name']:25} | {O_E:4.1f} | {system['centralization']:13} | {mol_prediction:11} | {rea>

print(f"\nüìä –ß–ï–°–¢–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
print("MOL –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å–ø–∞–¥ —Å–∏—Å—Ç–µ–º —Å O(‚Ñ∞) > 25")
print("–≠—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–µ –ù–ï –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
