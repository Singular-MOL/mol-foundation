#!/usr/bin/env python3
"""
MOL 5.2: –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ú–û–î–ï–õ–¨ –° –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–ï–ô –î–ê–ù–ù–´–•
Law of Minimal Ontological Load - Economic Systems Analysis
Official tool for MOL Foundation
"""

import csv
import math
import statistics
import requests
import json
import os

print("üåç MOL 5.2: –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ú–û–î–ï–õ–¨ –° –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–ï–ô –î–ê–ù–ù–´–•")
print("=" * 65)

class MOLEconomicAnalyzer:
    def __init__(self):
        self.countries_data = []
        
    def load_gdp_data(self, csv_path):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –í–í–ü –∏–∑ CSV —Ñ–∞–π–ª–∞"""
        try:
            with open(csv_path, 'r', encoding='utf-8') as file:
                reader = csv.DictReader(file)
                for row in reader:
                    country_data = {'name': row['Country']}
                    for year in range(1975, 2026):
                        value = row.get(str(year), '').strip()
                        country_data[year] = float(value) if value and value.replace('.', '').isdigit() else None
                    self.countries_data.append(country_data)
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.countries_data)} —Å—Ç—Ä–∞–Ω")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False

    def get_worldbank_data_safe(self, country_name, indicator, year):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π"""
        country_codes = {
            'united states': 'USA', 'china': 'CHN', 'japan': 'JPN', 
            'germany': 'DEU', 'russia': 'RUS', 'france': 'FRA', 
            'united kingdom': 'GBR', 'india': 'IND', 'brazil': 'BRA', 
            'italy': 'ITA', 'canada': 'CAN', 'australia': 'AUS', 
            'korea': 'KOR', 'spain': 'ESP', 'mexico': 'MEX', 
            'greece': 'GRC', 'argentina': 'ARG'
        }
        
        country_key = None
        for key, code in country_codes.items():
            if key in country_name.lower():
                country_key = code
                break
                
        if not country_key:
            return None
            
        url = f"http://api.worldbank.org/v2/country/{country_key}/indicator/{indicator}?format=json&date={year}"
        
        try:
            response = requests.get(url, timeout=10)
            data = response.json()
            if len(data) > 1 and data[1]:
                value = data[1][0].get('value')
                return float(value) if value else None
        except:
            pass
            
        return None

    def calculate_safe_O_E(self, country, start_year, end_year):
        """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–∞—Å—á—ë—Ç —Å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π –¥–∞–Ω–Ω—ã—Ö"""
        
        # 1. –ë–ê–ó–û–í–´–ô –ê–ù–ê–õ–ò–ó –í–í–ü
        gdp_values = []
        for year in range(start_year, end_year + 1):
            if country.get(year) is not None:
                gdp_values.append(country[year])
                
        if len(gdp_values) < 5:
            return None, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –í–í–ü"
            
        growth_rates = []
        for i in range(1, len(gdp_values)):
            if gdp_values[i-1] and gdp_values[i] and gdp_values[i-1] != 0:
                growth_rate = (gdp_values[i] - gdp_values[i-1]) / gdp_values[i-1]
                growth_rates.append(growth_rate)
                
        if len(growth_rates) < 4:
            return None, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ä–æ—Å—Ç—É"
            
        volatility = statistics.stdev(growth_rates) if len(growth_rates) > 1 else 0
        sharp_declines = sum(1 for rate in growth_rates if rate < -0.05)
        mean_growth = statistics.mean(growth_rates)
        decline_factor = sharp_declines / len(growth_rates)

        # 2. –ë–ï–ó–û–ü–ê–°–ù–´–ô –†–ê–°–ß–Å–¢ –ì–õ–û–ë–ê–õ–¨–ù–´–• –ú–ï–¢–†–ò–ö
        global_metrics = {}
        
        # –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–Ø FDI
        fdi = self.get_worldbank_data_safe(country['name'], 'BX.KLT.DINV.CD', end_year)
        if fdi and gdp_values[-1] and gdp_values[-1] > 0:
            fdi_ratio = fdi / gdp_values[-1]
            fdi_ratio = max(0, min(fdi_ratio, 1.0))
            global_metrics['fdi_dependence'] = fdi_ratio
        else:
            global_metrics['fdi_dependence'] = 0.3

        # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞
        global_pressure = 0
        pressure_points = 0
        for year in range(start_year, end_year + 1):
            crisis_factor = 0
            if 2008 <= year <= 2009: 
                crisis_factor = 0.8 
            elif 2020 <= year <= 2021: 
                crisis_factor = 0.6
            elif year >= 2022: 
                crisis_factor = 0.7
                
            global_pressure += crisis_factor
            pressure_points += 1
            
        global_metrics['crisis_pressure'] = global_pressure / pressure_points if pressure_points > 0 else 0

        # 3. –°–¢–ê–ë–ò–õ–¨–ù–ê–Ø –§–û–†–ú–£–õ–ê O(‚Ñ∞) —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≥—Ä–∞–Ω–∏—Ü
        base_metrics = (
            volatility * 20 + 
            decline_factor * 15 + 
            abs(mean_growth) * 5
        )
        
        global_metrics_component = (
            global_metrics['fdi_dependence'] * 8 + 
            global_metrics['crisis_pressure'] * 10
        )
        
        O_E = base_metrics + global_metrics_component
        O_E = max(0, min(O_E, 100))  # –ó–∞—â–∏—Ç–∞ –æ—Ç –≤—ã–±—Ä–æ—Å–æ–≤

        details = {
            'volatility': volatility,
            'decline_factor': decline_factor,
            'mean_growth': mean_growth,
            'fdi_dependence': global_metrics['fdi_dependence'],
            'crisis_pressure': global_metrics['crisis_pressure'],
            'data_points': len(growth_rates)
        }
        
        return O_E, details

    def run_historical_tests(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        print("\nüìä MOL 5.2: –¢–ï–°–¢ –° –ù–û–†–ú–ê–õ–ò–ó–û–í–ê–ù–ù–´–ú–ò –î–ê–ù–ù–´–ú–ò")
        print("–°—Ç—Ä–∞–Ω–∞           | –ü–µ—Ä–∏–æ–¥    | O(‚Ñ∞)  | –ü—Ä–æ–≥–Ω–æ–∑      | –°—Ç–∞—Ç—É—Å")
        print("-" * 70)
        
        test_cases = [
            ('United States', (2005, 2009), '–ö—Ä–∏–∑–∏—Å 2008'),
            ('Japan', (1985, 1993), '–ü—É–∑—ã—Ä—å 1990'),
            ('Russia', (1990, 1998), '–ö—Ä–∏–∑–∏—Å 1998'),
            ('China', (2015, 2020), '–¢–æ—Ä–≥–æ–≤—ã–µ –≤–æ–π–Ω—ã'),
            ('Argentina', (1998, 2002), '–î–µ—Ñ–æ–ª—Ç 2001'),
            ('Greece', (2005, 2012), '–î–æ–ª–≥–æ–≤–æ–π –∫—Ä–∏–∑–∏—Å'),
        ]
        
        correct = 0
        total = 0
        
        for country_name, period, crisis_name in test_cases:
            country = None
            for c in self.countries_data:
                if country_name.lower() in c['name'].lower():
                    country = c
                    break
                    
            if country:
                O_E, details = self.calculate_safe_O_E(country, period[0], period[1])
                if O_E is not None:
                    total += 1
                    
                    if O_E > 25: 
                        prediction = "üî¥ –†–ê–°–ü–ê–î"
                    elif O_E > 15: 
                        prediction = "üü° –ö–†–ò–ó–ò–°"
                    else: 
                        prediction = "üü¢ –°–¢–ê–ë–ò–õ–¨–ù–û"
                    
                    actual_outcome = "–ö–†–ò–ó–ò–°"  # –í—Å–µ —Ç–µ—Å—Ç-–∫–µ–π—Å—ã - –∫—Ä–∏–∑–∏—Å—ã
                    model_outcome = "–ö–†–ò–ó–ò–°" if O_E > 15 else "–°–¢–ê–ë–ò–õ–¨–ù–û"
                    
                    if model_outcome == actual_outcome:
                        correct += 1
                        status = "‚úÖ"
                    else:
                        status = "‚ùå"
                        
                    print(f"{country_name:15} | {period[0]}-{period[1]} | {O_E:5.1f} | {prediction:12} | {status} {crisis_name}")
        
        # –°–¢–ê–¢–ò–°–¢–ò–ö–ê
        if total > 0:
            accuracy = correct / total * 100
            print(f"\nüéØ –¢–û–ß–ù–û–°–¢–¨ MOL 5.2: {correct}/{total} = {accuracy:.1f}%")

    def analyze_russia_2020_2024(self):
        """–ê–Ω–∞–ª–∏–∑ –†–æ—Å—Å–∏–∏ 2020-2024"""
        print(f"\nüá∑üá∫ MOL 5.2: –†–û–°–°–ò–Ø 2020-2024")
        russia = None
        for c in self.countries_data:
            if 'russia' in c['name'].lower():
                russia = c
                break
                
        if russia:
            O_E_2020_2024, details = self.calculate_safe_O_E(russia, 2020, 2024)
            if O_E_2020_2024 is not None:
                if O_E_2020_2024 > 25: 
                    status = "üî¥ –†–ê–°–ü–ê–î"
                elif O_E_2020_2024 > 15: 
                    status = "üü° –ö–†–ò–ó–ò–°"
                else: 
                    status = "üü¢ –°–¢–ê–ë–ò–õ–¨–ù–û"
                    
                print(f"O(‚Ñ∞) = {O_E_2020_2024:.1f} ‚Üí {status}")
                print(f"‚Ä¢ –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –í–í–ü: {details['volatility']:.3f}")
                print(f"‚Ä¢ –ü–∞–¥–µ–Ω–∏—è (>5%): {details['decline_factor']:.1%}")
                print(f"‚Ä¢ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç FDI: {details['fdi_dependence']:.3f}")
                print(f"‚Ä¢ –ì–ª–æ–±–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞: {details['crisis_pressure']:.3f}")

def main():
    analyzer = MOLEconomicAnalyzer()
    
    # –ü–†–ê–í–ò–õ–¨–ù–´–ô –ü–£–¢–¨ –ö –î–ê–ù–ù–´–ú
    csv_path = "./.cache/kagglehub/datasets/codebynadiia/gdp-1975-2025/versions/1/GDP_1975_2025_uploaded.csv"
    
    print(f"üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑: {csv_path}")
    
    if not analyzer.load_gdp_data(csv_path):
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.")
        return
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
    analyzer.run_historical_tests()
    
    # –ê–Ω–∞–ª–∏–∑ –†–æ—Å—Å–∏–∏
    analyzer.analyze_russia_2020_2024()
    
    print(f"\nüîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –í MOL 5.2:")
    print("‚Ä¢ –ó–∞—â–∏—Ç–∞ –æ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∏ –∞–Ω–æ–º–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π")
    print("‚Ä¢ –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è FDI –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [0, 1]")
    print("‚Ä¢ –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≥–æ–¥—ã –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏")
    print("‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ O(‚Ñ∞) –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö")
    
    print(f"\nüí° MOL FOUNDATION")
    print("DOI: 10.5281/zenodo.17422128")
    print("Repository: https://github.com/Singular-MOL/mol-foundation")

if __name__ == "__main__":
    main()
